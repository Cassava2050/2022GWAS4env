---
title: "Diversity trials, 2021 & 2022"
author: "Luis Fernando Delgado Munoz"
format: html
code-fold: true
code-tools: true
editor: visual
---

# Introduction

This document is showing the data analysis of four diversity trials in Colombia.

The trials were managed by CIAT and the locations were:

-   Palmira, Valle del Cauca - Colombia
-   Momil, Cordoba - Colombia

## Load the libraries

```{r}
rm(list = ls())
library(pacman)
pacman::p_load(tidyverse, fauxnaif, readxl, yarrr, dplyr, knitr, rmarkdown, statgenSTA, statgenGxE, openxlsx, QBMS, magrittr, agriutilities, asreml, SpATS)
source("https://raw.githubusercontent.com/Cassava2050/PPD/main/utilities_tidy.R")
```

## Load the files to check

```{r}
local_file <- "yes" # "no"
if (local_file == "yes") {
  folder <- here::here("data//")  #"D:\\OneDrive - CGIAR\\Data Analysis\\HungLoc_2022\\data\\"
  file <- "phenotype4.csv"
  skip_col <- 3 # double check the number of col skipped
  trial_interest = "DVGN6"
  year_interest <- 2022
}

# 1) load the data
sel_data <- read_cassavabase(phenotypeFile = paste0(folder, file))

```

## Change columns into standar names

```{r}
# ---- Change columns into standar names ----
sel_data_kp <- change_colname(sel_data, NA)
```

## change the column class

```{r}
obs_col <- c(
  names(sel_data_kp)[str_detect(names(sel_data_kp), "obs_")],
  "use_rep_number", "blockNumber",
  "use_plot_number", "use_plot_width",
  "use_plot_length"
)
sel_data_kp %<>%
  mutate(across(all_of(obs_col), as.numeric))

names(sel_data_kp) = gsub("-", "_", names(sel_data_kp))
```

## Duplications in row and cols

```{r}
duplicated_plot <- row_col_dup(sel_data_kp)
```

## Plot trial layout

```{r, fig.height=8, fig.width=8}
trial_layout(sel_data_kp)
```

## Check the clone name

```{r}
cloneName_new_old <- check_clone_name(
  clone_list = sel_data_kp$use_accession_name,
  new_names = NA,
  add_check = NULL
)

trial_standard <- sel_data_kp %>%
  left_join(cloneName_new_old,
    by = c("use_accession_name" = "accession_name_ori")
  ) %>%
  select(-use_accession_name) %>%
  rename(use_accession_name = use_accession_name.y)
```

## Add GIS data

```{r}
trial_standard <- add_GIS(trial_standard)
```

## Location Map

```{r fig.height=4, fig.width=4}
td <- createTD(trial_standard, genotype = 'use_accession_name', 
               trial = 'use_trial_name', loc = 'use_location_short', 
               trLat = "use_latitude", trLong = "use_longitude",
               trDesign = 'res.rowcol'
)


map <- plot(td, plotType = "map",
     minLatRange = 12, minLongRange = 12)

# ggsave(paste0("images\\map_", trial_interest, Sys.Date(), ".png"),
#      plot = map, units = "in", dpi = 300, width = 12, height = 10
#    )
```

```{r}
accession_rep_ct <- trial_standard %>%
  count(use_trial_name, use_accession_name, use_rep_number)  %>%
  arrange(use_trial_name) %>%
  filter(n>1)
accession_rep_ct 
```

## Genotypes per trial

```{r}
trial_standard %>% group_by(use_trial_name, use_harvest_date, use_plant_date, use_location) %>% 
  summarise(n_gen = n_distinct(use_accession_name)) %>% 
  write.table("clipboard", sep="\t", col.names = T, row.names = F)
```

## plot plant number

```{r}
plants_plot <- trial_standard %>%
  group_by(use_trial_name) %>%
  count(obs_planted_number_plot) 

plants_plot

```

## Frequency harvest plant number

```{r}
plants_harvested <- trial_standard %>%
  group_by(use_trial_name) %>%
  count(obs_harvest_number) %>% arrange(desc(obs_harvest_number))

plants_harvested %>% 
  ggplot(aes(x = factor(obs_harvest_number), y = n, fill = factor(obs_harvest_number))) +
  geom_col() +
  theme_xiaofei() +
  labs(x = "Harvest_plant_number", y = "Freq", fill = "Harvest_plant_number") +
  facet_wrap(~ use_trial_name)
```

## Compute germination, yield, yield_starch

```{r}
  
trial_standard_new <- trial_standard %>%
  mutate(obs_harvest_number_plan =
           case_when(str_detect(use_trial_name, "202101") &  str_detect(use_trial_name , "DVGN6") ~ 6,
                     str_detect(use_trial_name, "202109") &  str_detect(use_trial_name , "DVGN6") ~ 6, 
                     str_detect(use_trial_name, "202206") &  str_detect(use_trial_name , "DVGN6") ~ 4, 
                     str_detect(use_trial_name, "202232") &  str_detect(use_trial_name , "DVGN6") ~ 6),
         obs_germination_perc = obs_germinated_number_plot/obs_planted_number_plot * 100,
         # 2) calculate area per plant
         area_plant = (use_plot_length*use_plot_width)/obs_planted_number_plot,
         # 3) calculate the yield_v4 obs_planted_number_plot
         obs_yield_ha_v2 = (((obs_root_weight_plot*10000)/(area_plant*obs_harvest_number_plan))/1000),
         obs_DM_yield_ha = obs_DM_gravity * obs_yield_ha_v2 / 100)

```

## Plot the yield_v2 vs yiel upload by Lizbeth

```{r}
library(plotly)

p1 <- trial_standard_new %>% ggplot() +
  geom_point(aes(x = obs_yield_ha, y = obs_yield_ha_v2, color = use_plot_number), show.legend = F) +
  facet_wrap(~use_trial_name) +
  theme_xiaofei()

ggplotly(p1)
detach("package:plotly", unload = TRUE)
```

## Fixing some issues

```{r}
# fixing the issues
# coalesce DM_raw with DM_raw_10mon. Are the same variables.

trial_standard_new <-
  trial_standard_new %>%
  mutate(
    obs_DM_raw =
      coalesce(obs_DM_raw, obs_DM_raw_10mon)
  ) %>%
  select(-c("obs_DM_raw_10mon"))
```

## Is numeric all traits?

```{r}
is_numeric(trial_data = trial_standard_new)
```

## Get the tidy data

```{r}
meta_info = names(trial_standard_new)[str_detect(names(trial_standard_new), "use_")]
meta_info = gsub("use_", "", meta_info)
meta_info
trial_tidy = trial_standard_new
names(trial_tidy)= gsub("use_", "", names(trial_standard_new))
# observations
trait_list = names(trial_tidy)[str_detect(names(trial_tidy), "obs_")]
trait_list = gsub("obs_", "", trait_list)
trait_list
names(trial_tidy)= gsub("obs_", "", names(trial_tidy))
trial_tidy = trial_tidy[c(meta_info, trait_list)]
```

# Boxplots

```{r warning=FALSE}
# remove columns with all NA
my_dat_noNA <- trial_tidy[, colSums(is.na(trial_tidy)) < nrow(trial_tidy)]
trait_wanted <- names(my_dat_noNA)[names(my_dat_noNA) %in% trait_list]
for (i in 1:length(trait_wanted)) {
  y_DATA <- my_dat_noNA[[trait_wanted[i]]] # data frame or vector?
  x_DATA <- my_dat_noNA$trial_name
  my_DATA <- my_dat_noNA
  y_LABEL <- trait_wanted[i]
  x_LABEL <- NULL
  TITLE <- NULL
  y_MAX <- max(y_DATA, na.rm = TRUE) * 1.2
  y_MIN <- 0
  plot_box <- ggplot(my_DATA, aes(x = x_DATA, y = y_DATA)) +
    geom_violin(trim = FALSE, fill = "gray") +
    geom_boxplot(width = 0.2) +
    coord_cartesian(ylim = c(y_MIN, y_MAX)) +
    theme_xiaofei() +
    labs(
      y = y_LABEL, x = x_LABEL,
      title = TITLE
    )
  plot(plot_box)
}
```

## Grouping boxplot

```{r}
plot_bxp <- trial_tidy %>%
  pivot_longer(
    cols = all_of(trait_wanted),
    names_to = "var",
    values_to = "values"
  ) %>%
  filter(!var %in% c(
    "germination_perc",
    "harvest_number",
    "harvest_number_plan",
    "germinated_number_plot",
    "mites_3mon",
    "planted_number_plot",
    "root_weight_water",
    "root_weight_air",
    "stake _plant",
    "root_number_commercial",
    "lodging1_3_6mon",
    #"HC_linamarase_10mon",
    "root_weight_plot",
    "shoot_weight_plot",
    "branch_angle"
    #"WAB_20min_10mon"
  )) %>%
  ggplot(aes(x = trial_name, y = values)) +
  geom_violin(trim = FALSE, fill = "gray") +
  geom_boxplot(width = 0.2, trim = FALSE) +
  labs(x = NULL, y = NULL, title = "") +
  theme_xiaofei() +
  theme(
    axis.text.x = element_text(size = 8, vjust = 1),
    axis.text.y = element_text(size = 8),
    plot.title = element_text(color = "black"),
    
  ) +
  facet_wrap(~var,
    ncol = 6, scales = "free_y"
    #labeller = as_labeller(fct_labels)
  ) +
  theme(
    strip.text.x = element_text(
      size = 12, face = "bold.italic"
    )
  )
plot_bxp
# ggsave(paste0("images\\boxplot_", trial_interest, Sys.Date(), ".png"),
#     plot = plot_bxp, units = "in", dpi = 300, width = 12, height = 10
#   )
```

## Do some correlations between dry matter by oven and dry matter by gravity specific

```{r}
library(ggpubr)

sp <- ggscatter(trial_tidy %>% 
                  filter(!trial_name %in% c("202232DVGN6_momi")),
                x = "DM_gravity", y = "DM_raw", add = "reg.line", 
                fill = "trial_name", shape = 21,
   add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
   conf.int = TRUE, # Add confidence interval
   ggtheme = theme_xiaofei())  +
  theme(legend.position = "none") +
   labs(x = "DM by gravity (%)", y = "DM by oven (%)") +
   facet_wrap(~ trial_name) +
   stat_cor(method = "pearson", label.x = 10, label.y = 50)
sp
```

## If I bind both trials

```{r}
ggscatter(trial_tidy %>% 
                  filter(!trial_name %in% c("202232DVGN6_momi")),
                x = "DM_gravity", y = "DM_raw",
          add = "reg.line", fill = "trial_name", shape = 21,  
   add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
   conf.int = TRUE, # Add confidence interval
   ggtheme = theme_xiaofei())  +
   labs(x = "DM by gravity (%)", y = "DM by oven (%)") +
   stat_cor(method = "pearson", label.x = 10, label.y = 50)


```

## Save the tidy data for analysis

```{r eval=FALSE}
write.csv(trial_tidy, here::here("output", paste("01_", year_interest, trial_interest,
  "_tidy_data4analysis_", Sys.Date(), ".csv", sep = "")), row.names = FALSE)
```

# Data analysis

## master_data to save the results

```{r}
master_data <- list()
```

## Load the tidy data

```{r}
trial_set_number = 1
# all files in the folder
list_file = list.files(here::here("output"))
# tidy data of the trials interested
sel_file = list_file[str_detect(list_file, "_tidy_data4analysis_") &
                       str_detect(list_file,
                                  paste(year_interest, trial_interest, sep=""))]
sel_file
# the data we will use
sel_file_use = sel_file[1]

trial1_tidy = read.csv(here::here("output", sel_file_use), header=TRUE,
                        stringsAsFactors = FALSE,
                        as.is=T,
                        check.names = FALSE)
if(trial_set_number == 1){
  trial_tidy_all = trial1_tidy
}
```

## Obtain all the trait information using a cloud file (gitHub) -------

```{r}
trait_all <-
  read.csv("https://raw.githubusercontent.com/lfdelgadom/standar_col_names_CB/main/standar_col_names.csv") %>%
  select(analysis_col_name) %>%
  filter(str_detect(analysis_col_name, "obs_"))
trait_all_adj <- gsub("obs_", "", trait_all$analysis_col_name)
trait_all_adj = c(trait_all_adj,
                  "harvest_number_plan", "germination_perc",
                  "yield_ha_v2", "DM_yield_ha", "starch_content")
trait_all_adj <- gsub("-", "_", trait_all_adj)
```

## Meta info.

```{r}
meta_all <-
  read.csv("https://raw.githubusercontent.com/lfdelgadom/standar_col_names_CB/main/standar_col_names.csv") %>%
  select(analysis_col_name) %>%
  filter(str_detect(analysis_col_name, "use_"))
meta_all_adj <- gsub("use_", "", meta_all$analysis_col_name)
meta_all_adj <- c(
  meta_all_adj,
  "check_released", "latitude", "longitude",
  "altitude", "department", "country",
  "ag_zone", "location_short"
)
```

## Select the observations for analysis

```{r}
names(trial_tidy_all) <- gsub("-", "_", names(trial_tidy_all))
analysis_trait <- names(trial_tidy_all)[names(trial_tidy_all) %in% trait_all_adj]
print("All the traits investigated:")
print(analysis_trait)
```

## Select the meta information for analysis

```{r}
meta_col <- names(trial_tidy_all)[names(trial_tidy_all) %in% meta_all_adj]
print("All the meta information:")
print(meta_col)
```

## Check the SD of each trait

```{r}
trial_rm_sd <- remove_no_var_tidy(my_dat = trial_tidy_all,
                   analysis_trait = analysis_trait,
                   meta_info = meta_col)

master_data[["mean_of_sd"]] = sd_mean
```

## Trait ideal

```{r}
trait_ideal <- analysis_trait[-c(5, 11:13, 16, 18:21, 25, 27, 31:32, 34, 38, 40, 41)]
print("the trait ideal is:"); trait_ideal
```

## Check design experimental

Agriutilities library

```{r}

my_dat <- trial_rm_sd %>% 
  add_column(block = NA) %>% mutate(block = as.factor(block))

results <- check_design_met(
  data = my_dat,
  genotype = "accession_name",
  trial = "trial_name",
  traits = trait_ideal,
  rep = "rep_number",
  col = "col_number",
  row = "row_number",
  block = "block"
)

plot(results, type = "connectivity")

summary <- results$summ_traits %>% add_column(Exp_design = "res_row_col")
master_data[["summ_traits"]] <- summary
```

## Check reps of yield in 202101DVGN6_ciat

## Single trial analysis

```{r}
obj <- single_trial_analysis(results = results,
                             progress = TRUE,
                             remove_outliers = TRUE,
                             engine = "asreml")

trials <- unique(my_dat$trial_name)
header_sort = vector()
i = 1
for (i in 1:length(trials)) {
  for (j in 1:length(trait_ideal)) {
    blue_blup <- obj$blues_blups %>% 
      filter(trial == trials[i]) %>% 
      select(-c(trial, seBLUEs, seBLUPs, wt)) %>% 
      pivot_wider(names_from = "trait", values_from = c("BLUEs", "BLUPs"))
    
    header_sort = c(header_sort,
                  grep(trait_ideal[j], sort(names(blue_blup)), value=TRUE))
  blue_blup <- blue_blup %>% dplyr::select(genotype, any_of(header_sort))
  }
 master_data[[paste0("BLUP_BLUE_", trials[i])]] <- blue_blup
}
```

## Single heritability

```{r}
single_h2 <- obj$resum_fitted_model[ ,1:3] %>% 
  group_by(trial) %>%
  spread(trait, value = heritability) 

master_data[["single_h2"]] <- single_h2
  
```

## Check reps of yield in 202101DVGN6_ciat

```{r fig.width=12}
GWAS_ciat <- my_dat %>% filter(trial_name == "202101DVGN6_ciat") %>% 
  select(accession_name, rep_number, yield_ha_v2) %>% 
  ggplot(aes(x = accession_name, y = yield_ha_v2, fill = accession_name)) +
  geom_boxplot(show.legend = F) +
  labs(x = NULL) +
  theme_xiaofei() +
  theme(axis.text.x = element_text(size=6, vjust = 1))

ggsave(paste0("images\\gwas_ciat_", Sys.Date(), ".png"),
     plot = GWAS_ciat, units = "in", dpi = 300, width = 18, height = 10
   )

# "202101DVGN6_ciat"

i = 1
for (i in 1:length(trials)) {
  
  cat("\n_______________")
  cat("\nTrial:", trials[i], "\n")
  cat("_______________\n")
  

test <- my_dat %>% filter(trial_name == trials[i], !check_test == "check") %>% 
  select(accession_name, rep_number, any_of(trait_ideal)) %>% 
  discard(~all(is.na(.) | . =="")) %>% 
  pivot_longer(!c(accession_name, rep_number), names_to = "trait", values_to = "value") %>% 
  #group_by(accession_name) %>%
  pivot_wider(names_from = rep_number, values_from = value)

colnames(test) <- c("accession_name", "trait", "rep_1", "rep_2")

corplot <- test %>% ggplot(aes(x = rep_1, y = rep_2)) +
  geom_jitter(show.legend = F, size = 2) +
  theme_xiaofei() +
  labs(title = trials[i]) +
  facet_wrap(~ trait, scales = "free" )

ggsave(paste0("images\\corplot_", trials[i], ".png"),
     plot = corplot, units = "in", dpi = 300, width = 18, height = 10
   )

correlations <- test %>% group_by(trait) %>% 
  summarize(cor = cor(rep_1, rep_2, use = "complete.obs")) %>% 
  arrange(desc(cor)) %>% 
  mutate(trial = trials[i])

if (i == 1) {
    cor_table <- correlations
  } else {
    cor_table <- rbind.data.frame(cor_table, correlations)
  }
  i <- i + 1

}

cor_table %>% 
  pivot_wider(names_from = "trial", values_from = "cor") %>% 
  write.table("clipboard",  sep="\t", col.names = T, row.names = F, na = "")

```



```{r}
root_color <- my_dat %>% filter(trial_name == "202101DVGN6_ciat", 
                  !check_test == "check") %>% 
  select(accession_name, rep_number, any_of(trait_ideal)) %>% 
  discard(~all(is.na(.) | . =="")) %>% 
  pivot_longer(!c(accession_name, rep_number), names_to = "trait", values_to = "value") %>% 
  #group_by(accession_name) %>%
  pivot_wider(names_from = rep_number, values_from = value) %>% 
  filter(trait == "root_skin_color1_3") 

colnames(root_color) <- c("accession_name", "trait", "rep_1", "rep_2")
  root_color %>% 
    summarize(cor = cor(rep_1, rep_2, use = "complete.obs"))
```



